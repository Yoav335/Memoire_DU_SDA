import streamlit as st
import pandas as pd
from utils.data_loader import load_data
from utils.ml_models import train_ridge, train_random_forest
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
import seaborn as sns

st.title("ü§ñ Machine Learning ‚Äì Analyse des √©missions et croissance")

# Charger les donn√©es
df = load_data()

# D√©finir les colonnes disponibles
target_vars = ['gdp', 'gdp_per_capita', 'co2', 'co2_per_capita']
feature_vars = [c for c in df.columns if c not in target_vars + ['country', 'year']]

# S√©lection de la target et des features
target = st.selectbox("Choisissez la variable cible (target)", target_vars)
features = st.multiselect("S√©lectionnez les variables explicatives", feature_vars, default=feature_vars[:3])

pays_disponibles = sorted(df['country'].dropna().unique())
zones = ["Monde"] + pays_disponibles

zone = st.selectbox("Choisissez la zone g√©ographique (Personnalis√©)", zones, key="zone_custom")

# Choix du mod√®le ML
model_choice = st.radio("Choisissez le mod√®le de Machine Learning", ["Ridge Regression", "Random Forest"])

# Tabs pour organisation
ml_tabs = st.tabs(["üìö Entra√Ænement", "üìä Graphiques", "üìà Comparaison"])

# Stockage des r√©sultats
if "ml_results" not in st.session_state:
    st.session_state.ml_results = {}

# --- Onglet Entra√Ænement ---
with ml_tabs[0]:
    st.subheader("Entra√Ænement du mod√®le")
    if st.button("Lancer l'entra√Ænement"):
        if not features:
            st.error("Veuillez s√©lectionner au moins une variable explicative.")
        else:
            # Filtrer le dataframe selon la zone s√©lectionn√©e
            if zone == "Monde":
                df_zone = df.copy()
            else:
                df_zone = df[df["country"] == zone].copy()

            if model_choice == "Ridge Regression":
                results = train_ridge(df_zone, target, features)
            elif model_choice == "Random Forest":
                results = train_random_forest(df_zone, target, features)

            model_key = f"{model_choice} - {target} - {zone}"
            st.session_state.ml_results[model_key] = results
            st.success(f"Mod√®le {model_choice} entra√Æn√© avec succ√®s pour la zone {zone} !")

# --- Onglet Graphiques ---


# --- Onglet Graphiques ---
with ml_tabs[1]:
    st.subheader("Visualisation des r√©sultats")
    if st.session_state.ml_results:
        model_selected = st.selectbox("Choisissez un mod√®le entra√Æn√©", list(st.session_state.ml_results.keys()))
        res = st.session_state.ml_results[model_selected]

        # Affichage valeurs r√©elles vs pr√©dictions (comme avant)
        if "fittedvalues" in res and "resid" in res:
            from utils.ml_models import plot_real_vs_pred, plot_feature_importance
            y = res["fittedvalues"] + res["resid"]
            y_pred = res["fittedvalues"]

            plot_real_vs_pred(y, y_pred, f"{model_selected} : Valeurs r√©elles vs Pr√©dictions")

            if "coefficients" in res:
                plot_feature_importance(res["coefficients"], f"{model_selected} : Coefficients")
            elif "feature_importances" in res:
                plot_feature_importance(res["feature_importances"], f"{model_selected} : Importance des variables")
        else:
            st.warning("Pas de donn√©es de pr√©diction pour ce mod√®le.")

        # --- Affichage arbre pour Random Forest ---
        if "model" in res and model_selected.startswith("Random Forest"):
            rf_model = res["model"]  # mod√®le RandomForestRegressor entra√Æn√©
            st.markdown("### Visualisation d'un arbre de la for√™t")

            # Choix de l'arbre √† afficher
            n_trees = len(rf_model.estimators_)
            tree_index = st.slider("Choisissez l'arbre √† afficher", 0, n_trees - 1, 0)

            fig, ax = plt.subplots(figsize=(20, 12))
            plot_tree(
                rf_model.estimators_[tree_index],
                feature_names=res.get("features", None),
                filled=True,
                rounded=True,
                fontsize=10,
                ax=ax
            )
            st.pyplot(fig)

            depths = [estimator.tree_.max_depth for estimator in rf_model.estimators_]

            fig, ax = plt.subplots()
            sns.histplot(depths, bins=range(max(depths)+2), ax=ax)
            ax.set_title("Distribution des profondeurs des arbres dans la for√™t")
            ax.set_xlabel("Profondeur de l'arbre")
            ax.set_ylabel("Nombre d'arbres")
            st.pyplot(fig)   
    else:
        st.info("Entra√Ænez d'abord un mod√®le pour voir les graphiques.")


# --- Onglet Comparaison ---
with ml_tabs[2]:
    st.subheader("Comparaison des mod√®les")
    if st.session_state.ml_results:
        mod√®les_dispo = list(st.session_state.ml_results.keys())
        mod√®les_choisis = st.multiselect("S√©lectionnez les mod√®les √† comparer", mod√®les_dispo, default=mod√®les_dispo)

        if mod√®les_choisis:
            r√©sum√© = []
            for m in mod√®les_choisis:
                res = st.session_state.ml_results[m]
                r√©sum√©.append({
                    "Mod√®le": m,
                    "R¬≤": res.get("r2"),
                    "RMSE": res.get("rmse")
                })
            df_resume = pd.DataFrame(r√©sum√©).set_index("Mod√®le")
            st.dataframe(df_resume.style.format({"R¬≤": "{:.3f}", "RMSE": "{:.3f}"}))

            # Graphique comparatif
            import matplotlib.pyplot as plt
            fig, ax = plt.subplots()
            df_resume.plot(kind="bar", ax=ax)
            plt.ylabel("Score / Erreur")
            st.pyplot(fig)
        else:
            st.warning("S√©lectionnez au moins un mod√®le pour comparer.")
    else:
        st.info("Entra√Ænez d'abord au moins un mod√®le pour comparer.")
